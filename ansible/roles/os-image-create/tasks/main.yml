---
# tasks file for os-image-create
- name: check required vars are set
  assert:
    that: "{{item}} is defined"
  with_items:
    - instance_uuid
    - snapshot_dir

- name: check openstack secrets are set
  assert:
    that: "{{item}} is defined"
  with_items:
    - OS_PROJECT_DOMAIN_NAME
    - OS_USER_DOMAIN_NAME
    - OS_PROJECT_NAME
    - OS_USERNAME
    - OS_REGION_NAME
    - OS_PASSWORD
    - OS_AUTH_URL
    - OS_IDENTITY_API_VERSION

- name: check if instance exists
  changed_when: false
  shell: openstack server show {{instance_uuid}} -f json
  environment:
    OS_PROJECT_DOMAIN_NAME: "{{OS_PROJECT_DOMAIN_NAME}}"
    OS_USER_DOMAIN_NAME: "{{OS_USER_DOMAIN_NAME}}"
    OS_PROJECT_NAME: "{{OS_PROJECT_NAME}}"
    OS_USERNAME: "{{OS_USERNAME}}"
    OS_REGION_NAME: "{{OS_REGION_NAME}}"
    OS_PASSWORD: "{{OS_PASSWORD}}"
    OS_AUTH_URL: "{{OS_AUTH_URL}}"
    OS_IDENTITY_API_VERSION: "{{OS_IDENTITY_API_VERSION}}"
  register: result

- name: create snapshot from instance (wait for completion)
  shell: openstack server image create --wait --name {{snapshot_name}} {{instance_uuid}} -f json
  vars:
    snapshot_name: "{{SNAPSHOT_PREFIX}}{{instance_uuid}}"
  environment:
    OS_PROJECT_DOMAIN_NAME: "{{OS_PROJECT_DOMAIN_NAME}}"
    OS_USER_DOMAIN_NAME: "{{OS_USER_DOMAIN_NAME}}"
    OS_PROJECT_NAME: "{{OS_PROJECT_NAME}}"
    OS_USERNAME: "{{OS_USERNAME}}"
    OS_REGION_NAME: "{{OS_REGION_NAME}}"
    OS_PASSWORD: "{{OS_PASSWORD}}"
    OS_AUTH_URL: "{{OS_AUTH_URL}}"
    OS_IDENTITY_API_VERSION: "{{OS_IDENTITY_API_VERSION}}"
  register: os_img_create

- set_fact:
    snapshot: "{{os_img_create.stdout | from_json}}"

- name: snapshot
  debug:
    var: snapshot

- name: snapshot uuid
  debug:
    var: snapshot.id

- name: tmp output
  template:
    src: output.json.j2
    dest: "{{snapshot_dir}}/create-output.json"
  vars:
    snapshot_name: "{{snapshot.name}}"
    snapshot_uuid: "{{snapshot.id}}"

- name: check if snapshot is present and active
  shell: openstack image show {{snapshot.id}} -f json
  vars:
    snapshot_status: "{{os_img_show.stdout | from_json | json_query('status')}}"
  environment:
    OS_PROJECT_DOMAIN_NAME: "{{OS_PROJECT_DOMAIN_NAME}}"
    OS_USER_DOMAIN_NAME: "{{OS_USER_DOMAIN_NAME}}"
    OS_PROJECT_NAME: "{{OS_PROJECT_NAME}}"
    OS_USERNAME: "{{OS_USERNAME}}"
    OS_REGION_NAME: "{{OS_REGION_NAME}}"
    OS_PASSWORD: "{{OS_PASSWORD}}"
    OS_AUTH_URL: "{{OS_AUTH_URL}}"
    OS_IDENTITY_API_VERSION: "{{OS_IDENTITY_API_VERSION}}"
  register: os_img_show
  until: snapshot_status == "active"
  retries: 30
  delay: 10

- set_fact:
    snapshot: "{{os_img_show.stdout | from_json}}"

- name: snapshot
  debug:
    var: snapshot

- name: add tags to image
  when: IMAGE_TAGS is not none and IMAGE_TAGS | length > 0
  shell: openstack image set {{snapshot.id}}  --tag {{item}}
  environment:
    OS_PROJECT_DOMAIN_NAME: "{{OS_PROJECT_DOMAIN_NAME}}"
    OS_USER_DOMAIN_NAME: "{{OS_USER_DOMAIN_NAME}}"
    OS_PROJECT_NAME: "{{OS_PROJECT_NAME}}"
    OS_USERNAME: "{{OS_USERNAME}}"
    OS_REGION_NAME: "{{OS_REGION_NAME}}"
    OS_PASSWORD: "{{OS_PASSWORD}}"
    OS_AUTH_URL: "{{OS_AUTH_URL}}"
    OS_IDENTITY_API_VERSION: "{{OS_IDENTITY_API_VERSION}}"
  with_items: IMAGE_TAGS

- name: success output
  template:
    src: output.json.j2
    dest: "{{snapshot_dir}}/create-output.json"
  vars:
    snapshot_name: "{{snapshot.name}}"
    snapshot_uuid: "{{snapshot.id}}"
